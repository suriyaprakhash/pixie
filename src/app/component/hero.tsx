'use client'
import React, { useState } from 'react'
import { generatePkce } from '../util/PkceUtil';
import { Slider } from '@mui/material';
import Link from 'next/link';
import Bulkgen from './bulkgen';

const Hero = () => {

    const [tokenSize, setTokenSize] = useState<number>(43);


    const [codeVerifier, setCodeVerifier] = useState<string>();
    const [codeChallenge, setCodeChallenge] = useState<string>();



    const generate = async (): Promise<void> => {
        const { codeVerifier, codeChallenge } = await generatePkce(tokenSize);
        setCodeVerifier(codeVerifier)
        setCodeChallenge(codeChallenge)
    }

    const generateChallenge = async (): Promise<void> => {
        let result: {
            codeVerifier: string;
            codeChallenge: string;
        } = await generatePkce(tokenSize, codeVerifier);
        setCodeVerifier(result.codeVerifier)
        setCodeChallenge(result.codeChallenge)
    }

    const handleTokenSizeChange = (event: Event, newValue: number | number[]): void => {
        setTokenSize(newValue as number)
    }



    const textChanged = (event: any) => {
        setCodeVerifier(event.target.value);
    }

    return (
        <div className="grid grid-cols-3 items-center h-[750px] sm:h-[80vh] sm:pl-20 sm:pr-20 pl-10 pr-10 gap-10 overflow-y-auto p-10">

            <section className='col-span-3 grid grid-cols-3 gap-5 border-2 p-5'>
                <label className='text-xl font-semibold col-span-5 p-5 '>QUICK GENERATOR</label>
                <div className='col-span-3 items-center text-center grid sm:grid-cols-3 gap-10 grid-cols-1'>
                    <label>Random Bytes to Generate Code Verifier</label>
                    <div className='p-5'>
                        <Slider className="text-primary-text" max={96} min={32} valueLabelDisplay="on"
                            value={tokenSize} onChange={handleTokenSizeChange} />
                    </div>
                    <button className="border-r-8 border-l-8 bg-button-bg text-button-text p-3 hover:bg-button-bg-hover hover:text-button-text-hover" onClick={generate}>Generate Random</button>
                </div>
                <div className='col-span-3 p-2'>
                    <div className='grid grid-cols-12 gap-3'>
                        <label className="col-span-6" title="Verifier to be used to generate the code challenge">Code verifier  {codeVerifier && <label className="text-secondary-text"> (base64url encoded, {codeVerifier?.length} chars)</label>}</label>
                        <svg onClick={() => { navigator.clipboard.writeText(codeVerifier!) }} className="col-start-11 col-end-12 cursor-pointer w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                            <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-6 5h6m-6 4h6M10 3v4h4V3h-4Z" />
                        </svg>
                        <textarea className='col-span-12 p-3 text-text-area-text bg-text-area-bg' placeholder='Type in your code verifier or Click Generate Random to generate new' value={codeVerifier} onChange={textChanged}></textarea>
                    </div>
                </div>
                <div className='col-span-3 p-2'>
                    <button className="w-full border-r-8 border-l-8 bg-button-bg text-button-text p-3 hover:bg-button-bg-hover hover:text-button-text-hover" onClick={generateChallenge} >Get Challenge</button>
                </div>
                <div className='col-span-3 p-2'>
                    <div className='grid grid-cols-12 gap-3'>
                        <label className="col-span-6" title="Code challenge generated by verfier">Code challenge {codeChallenge && <label className="text-secondary-text">  (base64url encoded,{codeChallenge?.length} chars)</label>}</label>
                        <svg onClick={() => { navigator.clipboard.writeText(codeChallenge!) }} className="col-start-11 col-end-12 cursor-pointer w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                            <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-6 5h6m-6 4h6M10 3v4h4V3h-4Z" />
                        </svg>
                        <textarea className='col-span-12 p-3 text-text-area-text bg-text-area-bg' disabled value={codeChallenge}></textarea>
                    </div>

                </div>
            </section>

            <section className='col-span-3 '>
                <Bulkgen/>
            </section>

            <section className='col-span-3  md:grid md:grid-cols-12 border-2 p-5 gap-3 hidden '>
                <label className='text-xl font-semibold col-span-12 p-5'>REST API</label>
                <div className='col-span-12'>
                    <Link className="" href="http://api.pixie.suriyaprakhash.com/" target="_blank">
                        <button className="w-full border-r-8 border-l-8 bg-button-bg text-button-text p-3 hover:bg-button-bg-hover hover:text-button-text-hover">
                            GET JSON
                        </button>
                    </Link>
                </div>

            </section>
        </div>
    )
}

export default Hero